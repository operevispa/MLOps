pipeline {
    agent any

    stages {
        stage('setup environment') {
            steps {
                script {
                    echo 'Creating a virtual environment, if not already created'
                    sh '''
                        if [ ! -d ".venv" ]; then
                            env_name=${1:-".venv"}
                            python3 -m venv "$env_name"
                            echo "The virtual environment '$env_name' has been created."
                        fi
                    '''

                    echo 'Activating the virtual environment'
                    sh '''
                        env_name=${1:-".venv"}
                        if [ ! -d "$env_name" ]; then
                            echo "Virtual environment '$env_name' not found. Use '$0 create [env_name]' to create."
                            return 1
                        fi
                        if [ -z "$VIRTUAL_ENV" ]; then
                            chmod +x ./$env_name/bin/activate
                            ./$env_name/bin/activate
                            echo "Virtual environment '$env_name' is activated."
                        else
                            echo "The virtual environment has already been activated."
                        fi
                    '''

                    echo 'pip installation'
                    sh '''
                        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                        python3 get-pip.py
                    '''                    

                    echo 'Dependency installation'
                    sh 'pip install -r requirements.txt'
                    
                }                
            }
        }

        stage('data creation') {
            steps {
                sh 'python3 src/data_creation.py'
            }
        }

        stage('train model') {
            steps {
                sh 'python3 src/train_model.py'
            }
        }

        stage('test model') {
            steps {
                sh 'python3 src/test_model.py'
            }
        }
    }
    post {
        always {
            echo 'Pipeline has finished.'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
